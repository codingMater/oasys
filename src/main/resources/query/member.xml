<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oasys.common.member.dao.MemberDao">
	
	<sql id="memberSearch">
		<if test="search=='m_name'">
			<![CDATA[ m_name LIKE '%' || #{keyword} || '%' ]]>
		</if>
		<if test="search=='m_phone'">
			<![CDATA[ m_phone LIKE '%' || #{keyword} || '%' ]]>
		</if>
		<if test="search=='m_id'">
			<![CDATA[ m_id LIKE '%' || #{keyword} || '%' ]]>
		</if>
		<if test="search=='m_email'">
			<![CDATA[ m_email LIKE '%' || #{keyword} || '%' ]]>
		</if>
	</sql>
	
	<select id="memberList" resultType="member">
		SELECT m_type, m_no, mg_grade, m_name, m_gender, m_id, m_pwd, 
			m_pwdchanged, m_phone, m_email, m_birth,m_ytotal, m_total, m_joindate
		FROM (
			SELECT /*+ INDEX_DESC(m MEMBER_PK) INDEX_DESC(mg MEMBERGRADE_PK) */
				rownum as rnum, m_type, m.m_no, mg_grade, m_name, m_gender, m_id, m_pwd,
				to_char(m_pwdchanged, 'yyyy.mm.dd') m_pwdchanged,
				m_phone, m_email, to_char(m_birth, 'yyyy.mm.dd') m_birth, m_ytotal, m_total,
    			to_char(m_joindate, 'yyyy.mm.dd') m_joindate 
    		FROM member m, membergrade mg 
			WHERE m.m_no=mg.m_no
			<trim prefix="AND (" suffix= ")" prefixOverrides="AND">
				<include refid="memberSearch"></include>
			</trim>
		<![CDATA[
				AND rownum <= #{pageNum} * #{amount}
			) memberlist
		WHERE rnum > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	
	<select id="adminList" resultType="member">
		SELECT m_type,m_no, m_name, m_gender, m_id, m_pwd,
			m_phone, m_email, to_char(m_birth, 'yyyy.mm.dd') m_birth, 
			to_char(m_joindate, 'yyyy.mm.dd') m_joindate 
		FROM member where m_type='관리자'
	</select>
	
	<select id="memberListCnt" parameterType="member" resultType="int">
		SELECT count(*) 
		FROM (
			SELECT m_type, m.m_no, mg_grade, m_name, m_gender, m_id, m_pwd,
				to_char(m_pwdchanged, 'yyyy.mm.dd') m_pwdchanged,
				m_phone, m_email, to_char(m_birth, 'yyyy.mm.dd') m_birth, m_total,
    			to_char(m_joindate, 'yyyy.mm.dd') m_joindate 
    		FROM member m, membergrade mg 
			WHERE m.m_no=mg.m_no
		) memberlist
		<where>
			<trim>
				<include refid="memberSearch"></include>
			</trim>
		</where>
	</select>
	
	<select id="memberDetail" parameterType="int" resultType="member">
		SELECT m.m_no, m_name, m_id, m_pwd, m_phone, m_email, to_char(m_birth, 'yyyy-mm-dd') m_birth,
			 m_ytotal, m_total, to_char(m_joindate, 'yyyy-mm-dd HH:MI:SS') m_joindate, m_gender, m_type,
			 to_char(m_pwdchanged, 'yyyy-mm-dd HH:MI:SS') m_pwdchanged, m_agreement, mg_grade, to_char(mg_date, 'yyyy-mm-dd HH:MI:SS') mg_date, mg_discount
		FROM 
			member m, 
			(SELECT m_no, mg.mg_grade, mg_date, mg_discount 
				FROM membergrade mg, grade g 
				WHERE mg.mg_grade=g.mg_grade) mgrade
		WHERE m.m_no=mgrade.m_no AND m.m_no=#{m_no}
	</select>
	
	<delete id="adminDelete" parameterType="int">
		DELETE FROM member WHERE m_no = #{m_no}
	</delete>	
	
	<update id="memberTotalUpdate" parameterType="booking" >
		update member set m_total=m_total+#{p_pay}, m_ytotal=m_ytotal+#{p_pay} where m_no=#{m_no}
	</update>
	
	<select id="memberGradeList" parameterType="member" resultType="member">
		SELECT m_no, m_name, m_gender, m_id, m_phone, mg_grade, mg_upgrade, m_ytotal, m_total, mg_date, m_joindate
		FROM (
			SELECT /*+ INDEX_DESC(m MEMBER_PK) INDEX_DESC(mg MEMBERGRADE_PK) */
				rownum as rnum, m.m_no, m_name, m_gender, m_id, m_phone, mg_grade, mg_upgrade, m_ytotal, m_total, mg_date, m_joindate 
			FROM member m, membergrade mg
			WHERE m.m_no=mg.m_no
		<![CDATA[
				AND rownum <= #{pageNum} * #{amount}
			) mbGradeList
		WHERE rnum > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	<update id="gradeDataUpgradeToSilver">
		UPDATE (select m.m_no, m_ytotal, mg_upgrade from member m, membergrade mg where m.m_no=mg.m_no) SET mg_upgrade='실버' 
		WHERE m_ytotal BETWEEN 0 and 499999 
	</update>
	
	<update id="gradeDataUpgradeToGold">
		UPDATE (select m.m_no, m_ytotal, mg_upgrade from member m, membergrade mg where m.m_no=mg.m_no) SET mg_upgrade='골드' 
		WHERE m_ytotal BETWEEN 500000 and 1499999 
	</update>
	
	<update id="gradeDataUpgradeToVIP">
		UPDATE (select m.m_no, m_ytotal, mg_upgrade from member m, membergrade mg where m.m_no=mg.m_no) SET mg_upgrade='VIP' 
		WHERE m_ytotal BETWEEN 1500000 and 2999999
	</update>
	
	<update id="gradeDataUpgradeToVVIP">
		UPDATE (select m.m_no, m_ytotal, mg_upgrade from member m, membergrade mg where m.m_no=mg.m_no) SET mg_upgrade='VVIP' 
		WHERE m_ytotal>=3000000
	</update>
	
	<update id="updateGrade">
		UPDATE membergrade SET mg_grade=mg_upgrade, mg_date=sysdate WHERE mg_grade!=mg_upgrade
	</update>
	
	<update id="yearTotalReset">
		UPDATE member SET m_ytotal=0
	</update>
	
	
	
	
	
	<!-- 로그인 처리 -->
	<select id="loginCheck" resultType="member" parameterType="member">

		select m_no, m_id, m_pwd, m_name, m_type, m_phone, m_email, m_gender, to_char(m_birth, 'YYYY-MM-DD'), m_total, m_ytotal from member where m_id = #{m_id} and m_pwd = #{m_pwd}

	</select>
	
	<select id="memberSelect" parameterType="String" resultType="member">
		select m_no, m_id, m_pwd, m_name, m_phone, m_email, m_birth, m_gender from member where m_id = #{m_id}
	</select>
	
	<select id="memberNo" resultType="int">
		select member_seq.nextval from dual
	</select>
	
	<!-- 회원가입 처리 쿼리 -->
	<insert id="memberInsert" parameterType="member">
		insert into member(m_no, m_id, m_pwd, m_name, m_phone, m_email, m_birth, m_gender)
		values(#{m_no}, #{m_id}, #{m_pwd}, #{m_name}, #{m_phone}, #{m_email}, #{m_birth}, #{m_gender})
	</insert>
	
	<insert id="memberGradeInsert" parameterType="member">
		insert into membergrade(m_no) values(#{m_no})
	</insert>
	
	<!-- 아이디 중복체크 쿼리 -->
	<select id="idCheck" resultType="int" parameterType="member">
		select nvl((select 1 from member where m_id = #{m_id}), 0) as state from dual
	</select>
	
	<!-- 회원수정 -->
	<update id="memberUpdate" parameterType="member">
		update member set m_pwd = #{m_pwd}, m_phone = #{m_phone}, m_email = #{m_email}, m_pwdchanged = sysdate
		where m_id = #{m_id}
	</update>
	
	<!-- 회원 탈퇴 -->
	<delete id="memberDelete" parameterType="member">
		delete from member where m_id = #{m_id}
	</delete>

	<!-- 아이디 찾기 -->
	<select id="idSearch" parameterType="member" resultType="member">
		select m_id from member where m_name = #{m_name} and m_email = #{m_email}
	</select>
	
	<!-- 비밀번호찾기 -->
	<select id="pwSearch" parameterType="member" resultType="member">
		select m_id, m_pwd from member where m_name = #{m_name} and m_email = #{m_email} and m_id = #{m_id}
	</select>
	

</mapper>